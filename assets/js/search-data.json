{
  
    
        "post0": {
            "title": "Strings",
            "content": "Strings are used in Python to record text information, such as names. Strings in Python are actually a sequence, which basically means Python keeps track of every element in the string as a sequence. For example, Python understands the string &quot;hello&#39; to be a sequence of letters in a specific order. This means we will be able to use indexing to grab particular letters (like the first letter, or the last letter). . This idea of a sequence is an important one in Python and we will touch upon it later on in the future. . In this lecture we&#39;ll learn about the following: . 1.) Creating Strings 2.) Printing Strings 3.) String Indexing and Slicing 4.) String Properties 5.) String Methods 6.) Print Formatting . Creating a String . To create a string in Python you need to use either single quotes or double quotes. For example: . # Single word &#39;hello&#39; . &#39;hello&#39; . # Entire phrase &#39;This is also a string&#39; . &#39;This is also a string&#39; . # We can also use double quote &quot;String built with double quotes&quot; . &#39;String built with double quotes&#39; . # Be careful with quotes! &#39; I&#39;m using single quotes, but this will create an error&#39; . File &#34;&lt;ipython-input-4-da9a34b3dc31&gt;&#34;, line 2 &#39; I&#39;m using single quotes, but this will create an error&#39; ^ SyntaxError: invalid syntax . The reason for the error above is because the single quote in I&#39;m stopped the string. You can use combinations of double and single quotes to get the complete statement. . &quot;Now I&#39;m ready to use the single quotes inside a string!&quot; . &#34;Now I&#39;m ready to use the single quotes inside a string!&#34; . Now let&#39;s learn about printing strings! . Printing a String . Using Jupyter notebook with just a string in a cell will automatically output strings, but the correct way to display strings in your output is by using a print function. . # We can simply declare a string &#39;Hello World&#39; . &#39;Hello World&#39; . # Note that we can&#39;t output multiple strings this way &#39;Hello World 1&#39; &#39;Hello World 2&#39; . &#39;Hello World 2&#39; . We can use a print statement to print a string. . print(&#39;Hello World 1&#39;) print(&#39;Hello World 2&#39;) print(&#39;Use n to print a new line&#39;) print(&#39; n&#39;) print(&#39;See what I mean?&#39;) . Hello World 1 Hello World 2 Use to print a new line See what I mean? . String Basics . We can also use a function called len() to check the length of a string! . len(&#39;Hello World&#39;) . 11 . Python&#39;s built-in len() function counts all of the characters in the string, including spaces and punctuation. . String Indexing . We know strings are a sequence, which means Python can use indexes to call parts of the sequence. Let&#39;s learn how this works. . In Python, we use brackets [] after an object to call its index. We should also note that indexing starts at 0 for Python. Let&#39;s create a new object called s and then walk through a few examples of indexing. . # Assign s as a string s = &#39;Hello World&#39; . #Check s . &#39;Hello World&#39; . # Print the object print(s) . Hello World . Let&#39;s start indexing! . # Show first element (in this case a letter) s[0] . &#39;H&#39; . s[1] . &#39;e&#39; . s[2] . &#39;l&#39; . We can use a : to perform slicing which grabs everything up to a designated point. For example: . # Grab everything past the first term all the way to the length of s which is len(s) s[1:] . &#39;ello World&#39; . # Note that there is no change to the original s s . &#39;Hello World&#39; . # Grab everything UP TO the 3rd index s[:3] . &#39;Hel&#39; . Note the above slicing. Here we&#39;re telling Python to grab everything from 0 up to 3. It doesn&#39;t include the 3rd index. You&#39;ll notice this a lot in Python, where statements and are usually in the context of &quot;up to, but not including&quot;. . #Everything s[:] . &#39;Hello World&#39; . We can also use negative indexing to go backwards. . # Last letter (one index behind 0 so it loops back around) s[-1] . &#39;d&#39; . # Grab everything but the last letter s[:-1] . &#39;Hello Worl&#39; . We can also use index and slice notation to grab elements of a sequence by a specified step size (the default is 1). For instance we can use two colons in a row and then a number specifying the frequency to grab elements. For example: . # Grab everything, but go in steps size of 1 s[::1] . &#39;Hello World&#39; . # Grab everything, but go in step sizes of 2 s[::2] . &#39;HloWrd&#39; . # We can use this to print a string backwards s[::-1] . &#39;dlroW olleH&#39; . String Properties . It&#39;s important to note that strings have an important property known as immutability. This means that once a string is created, the elements within it can not be changed or replaced. For example: . s . &#39;Hello World&#39; . # Let&#39;s try to change the first letter to &#39;x&#39; s[0] = &#39;x&#39; . TypeError Traceback (most recent call last) &lt;ipython-input-11-976942677f11&gt; in &lt;module&gt; 1 # Let&#39;s try to change the first letter to &#39;x&#39; -&gt; 2 s[0] = &#39;x&#39; TypeError: &#39;str&#39; object does not support item assignment . Notice how the error tells us directly what we can&#39;t do, change the item assignment! . Something we can do is concatenate strings! . s . &#39;Hello World&#39; . # Concatenate strings! s + &#39; concatenate me!&#39; . &#39;Hello World concatenate me!&#39; . # We can reassign s completely though! s = s + &#39; concatenate me!&#39; . print(s) . Hello World concatenate me! . s . &#39;Hello World concatenate me!&#39; . We can use the multiplication symbol to create repetition! . letter = &#39;z&#39; . letter*10 . &#39;zzzzzzzzzz&#39; . Basic Built-in String methods . Objects in Python usually have built-in methods. These methods are functions inside the object (we will learn about these in much more depth later) that can perform actions or commands on the object itself. . We call methods with a period and then the method name. Methods are in the form: . object.method(parameters) . Where parameters are extra arguments we can pass into the method. Don&#39;t worry if the details don&#39;t make 100% sense right now. Later on we will be creating our own objects and functions! . Here are some examples of built-in methods in strings: . s . &#39;Hello World concatenate me!&#39; . # Upper Case a string s.upper() . &#39;HELLO WORLD CONCATENATE ME!&#39; . # Lower case s.lower() . &#39;hello world concatenate me!&#39; . # Split a string by blank space (this is the default) s.split() . [&#39;Hello&#39;, &#39;World&#39;, &#39;concatenate&#39;, &#39;me!&#39;] . # Split by a specific element (doesn&#39;t include the element that was split on) s.split(&#39;W&#39;) . [&#39;Hello &#39;, &#39;orld concatenate me!&#39;] . There are many more methods than the ones covered here. Visit the Advanced String section to find out more! . Print Formatting . We can use the .format() method to add formatted objects to printed string statements. . The easiest way to show this is through an example: . &#39;Insert another string with curly brackets: {}&#39;.format(&#39;The inserted string&#39;) . &#39;Insert another string with curly brackets: The inserted string&#39; . We will revisit this string formatting topic in later sections when we are building our projects! . Next up: Lists! .",
            "url": "http://doniafrizal.id/python/2020/05/06/Strings.html",
            "relUrl": "/python/2020/05/06/Strings.html",
            "date": " • May 6, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Variable Assignment",
            "content": "Rules for variable names . names can not start with a number | names can not contain spaces, use _ intead | names can not contain any of these symbols: . :&#39;&quot;,&lt;&gt;/?| !@#%^&amp;*~-+ . | it&#39;s considered best practice (PEP8) that names are lowercase with underscores . | avoid using Python built-in keywords like list and str | avoid using the single characters l (lowercase letter el), O (uppercase letter oh) and I (uppercase letter eye) as they can be confused with 1 and 0 | . Dynamic Typing . Python uses dynamic typing, meaning you can reassign variables to different data types. This makes Python very flexible in assigning data types; it differs from other languages that are statically typed. . my_dogs = 2 . my_dogs . 2 . my_dogs = [&#39;Sammy&#39;, &#39;Frankie&#39;] . my_dogs . [&#39;Sammy&#39;, &#39;Frankie&#39;] . Pros and Cons of Dynamic Typing . Pros of Dynamic Typing . very easy to work with | faster development time | . Cons of Dynamic Typing . may result in unexpected bugs! | you need to be aware of type() | . Assigning Variables . Variable assignment follows name = object, where a single equals sign = is an assignment operator . p = 10 . p . 10 . l = 5 . l . 5 . Here we assigned the integer object 5 to the variable name a.Let&#39;s assign a to something else: . a = 10 . a . 10 . You can now use a in place of the number 10: . a + a . 20 . Reassigning Variables . Python lets you reassign variables with a reference to the same object. . a = a + 10 . a . 20 . There&#39;s actually a shortcut for this. Python lets you add, subtract, multiply and divide numbers with reassignment using +=, -=, *=, and /=. . a += 10 . a . 30 . a *= 2 . a . 60 . Determining variable type with type() . You can check what type of object is assigned to a variable using Python&#39;s built-in type() function. Common data types include: . int (for integer) | float | str (for string) | list | tuple | dict (for dictionary) | set | bool (for Boolean True/False) | . type(a) . int . a = (1,2) . type(a) . tuple . Simple Exercise . This shows how variables make calculations more readable and easier to follow. . my_income = 100 tax_rate = 0.1 my_taxes = my_income * tax_rate . my_taxes . 10.0 . Great! You should now understand the basics of variable assignment and reassignment in Python.Up next, we&#39;ll learn about strings! .",
            "url": "http://doniafrizal.id/python/2020/05/04/variable-assignment.html",
            "relUrl": "/python/2020/05/04/variable-assignment.html",
            "date": " • May 4, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "http://doniafrizal.id/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "http://doniafrizal.id/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I am Doni Afrizal, currently working as QHSE Manager at one of oil and gas company located in Batam. QA/QC and HSE is my current domain. Programming is my hobby since college back in year 2000. Now, learning Python, R, Tableu, Probability and Statistic, and all related skill in Big Data, Data Science, and Data Engineering. . Most of content in this blog was learned in online course at Data Camp, Udemy, Udacity, and Edx. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "http://doniafrizal.id/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "http://doniafrizal.id/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}